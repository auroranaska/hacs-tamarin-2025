theory ACME
begin

builtins: signing, asymmetric-encryption

#ifdef deo
functions: deo_pk/2
equations: verify(sig, m, deo_pk(m, sig)) = true
#endif

/* This is a restriction that ensures in any rule with the Eq(x,y) action, the terms
matched by the variables x and y are the same. The modeler can then add an Eq action to 
any rule where such an equality is desired, e.g., check that signature verification succeeds.
*/
restriction Eq:
  "All x y #i. Eq(x, y) @ #i ==> x = y"

// Owner sends register request
rule Client_Init:
  [ Fr(~sk) ]
  --[ ClientInitMessage(),
     OwnerClaimedAddress($Adr, pk(~sk))]->
  [ Out(<$Adr>), StateC(~sk, $C, $Adr) ]

rule LetsEncrypt_Server_Init:
  [ Fr(~token),
    In($Adr)
   ]
  --[ LEInitMessage()]->
  [ Out(<~token>), StateLE(~token, $Adr) ]

rule Client_Sign:
  let
    signature= sign(~token, ~sk)
  in
  [ StateC(~sk, $C, $Adr),
    In(<~token>) ]
  --[ ClientSignMessage(~sk, ~token, $Adr)]->
  [ !OutAuthenticated(<$Adr, signature>),
    Out(<pk(~sk)>) ]

rule DNS_Server:
  [ !OutAuthenticated(<$Adr, signature>)
   ]
  --[ RegisterAdr($Adr, signature)]->
  [ !RegisteredAdr($Adr, signature) ]

rule DNS_Attacker_Query:
  [ In($Adr),
    !RegisteredAdr($Adr, signature)
   ]
  -->
  [ Out(signature) ]

rule LetsEncrypt_Server_Verif:
  [ In(o_pk),
    !RegisteredAdr($Adr, signature),
    StateLE(~token, $Adr)
   ]
  --[ AcceptedAddress($Adr, o_pk),
      Eq(verify(signature,~token, o_pk), true)
      ]->
  [ Out('Approved') ]


// Sanity Traces to check executability of the model
lemma ExecutabilityClient:
  exists-trace
  "Ex #i. ClientInitMessage() @ #i"

lemma ExecutabilityLE:
  exists-trace
  "Ex #i. LEInitMessage() @ #i"

lemma ExecutabilityLEEnd:
  exists-trace
  "Ex A s #i. AcceptedAddress(A, s) @ #i"


// Authentication of Owner
lemma OwnerAuthentication:
  "All Adr o_pk #i. 
   AcceptedAddress(Adr, o_pk) @ #i 
   ==>  
      (Ex #j. j<i & OwnerClaimedAddress(Adr, o_pk) @ #j)
    "

end
