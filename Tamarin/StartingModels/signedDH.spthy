theory SignedDH
begin

builtins: hashing, diffie-hellman, signing

/* This is a restriction that ensures in any rule with the Eq(x,y) action, the terms
matched by the variables x and y are the same. The modeler can then add an Eq action to 
any rule where such an equality is desired, e.g., check that signature verification succeeds.
*/
restriction Eq:
  "All x y #i. Eq(x, y) @ #i ==> x = y"

// Generate Server's Long-Term Keys (s_sk, s_pk)
rule generate_serverLtk:
  [ ... ]
  -->
  [ ...
    Out(s_pk) ]

// Client generates DH pair, and sends public key
rule Client_Init:
  let 
    ...
  in
  [ ... ]
  --[ ClientInitMessage()]->
  [ ... ]

/**Server generates their own DH pair (y_sk, y_pk),
  sign the public keys of client and server,
  calculates the session key, and
  send the public key and signature to client.
**/
rule Server_Init:
  let 
    ...
  in
  [ ... ]
  --[ ServerInitMessage(),
    ...
    ]->
  [ ... ]

rule Client_Accepts:
  let
    ...
  in
  [ ... ]
  --[ ClientRecvMessage(),
      ... ]->
  [ ... ]

// Sanity Traces to check executability of the model
lemma ExecutabilityClient:
  exists-trace
  "Ex #i. ClientInitMessage() @ #i"

lemma ExecutabilityServer:
  exists-trace
  "Ex #i. ServerInitMessage() @ #i"

lemma ExecutabilityClientEnd:
  exists-trace
  "Ex #i. ClientRecvMessage() @ #i"

// Secrecy of established session key
lemma ServerKeySecrecy:
  "All ..."

lemma ClientKeySecrecy:
  "All ..."

// Server Authentication at the end of the protocol
lemma ServerAuthentication:
  "All ... "


end
